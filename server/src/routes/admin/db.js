const { Router } = require("express");
const ClubService = require("../../services/ClubService");
const TeamService = require("../../services/TeamService");
const SeasonService = require("../../services/SeasonService");
const MemberService = require("../../services/MemberService");
const ChoreoService = require("../../services/ChoreoService");
const Choreo = require("../../db/models/choreo");
const {
  sequelizeDataTypeToHtmlInputType,
} = require("../../utils/datatypeConverter");
const Season = require("../../db/models/season");
const Team = require("../../db/models/team");
const Club = require("../../db/models/club");
const Member = require("../../db/models/member");
const UserService = require("../../services/UserService");
const SeasonTeamService = require("../../services/SeasonTeamService");
const { logger } = require("../../plugins/winston");

const router = Router();

router.get("/", (req, res, next) => {
  res.render("../src/views/admin/db.ejs", {
    username: req.Admin.username,
  });
  return next();
});

router.get("/:entity", async (req, res, next) => {
  const UserId = req.query.UserId || null;
  let columns, data, model;
  let extraData = {
    userList: (await UserService.getAll(null, { all: true })).map(
      ({ id, username }) => ({ value: id, name: username })
    ),
  };
  switch (req.params.entity) {
    case "clubs":
      columns = ["name"];
      data = await ClubService.getAll(UserId, { all: !UserId });
      model = Club;
      break;
    case "teams":
      columns = ["name"];
      data = await TeamService.getAll(UserId, { all: !UserId });
      model = Team;
      extraData.clubList = (await ClubService.getAll(null, { all: true })).map(
        (club) => ({ value: club.id, name: club.name })
      );
      break;
    case "seasons":
      columns = ["year", "name"];
      data = await SeasonService.getAll(UserId, { all: !UserId });
      model = Season;
      break;
    case "members":
      columns = ["name", "nickname", "abbreviation"];
      data = await MemberService.getAll(UserId, { all: !UserId });
      model = Member;
      extraData.teamList = (await TeamService.getAll(null, { all: true })).map(
        (team) => ({ value: team.id, name: team.name })
      );
      extraData.seasonteamList = (await SeasonTeamService.getAll())
        .filter((seasonTeam) => seasonTeam.User)
        .map((seasonTeam) => {
          return {
            value: seasonTeam.id,
            name: `${seasonTeam.User.username} - ${seasonTeam.Team.name} (${
              seasonTeam.Season?.name
            }${seasonTeam.Season?.year ? `, ${seasonTeam.Season?.year}` : ""})`,
          };
        });
      break;
    case "choreos":
      columns = ["name", "counts"];
      data = await ChoreoService.getAll(UserId, { all: !UserId });
      model = Choreo;
      extraData.seasonteamList = (await SeasonTeamService.getAll())
        .filter((seasonTeam) => seasonTeam.User)
        .map((seasonTeam) => {
          return {
            value: seasonTeam.id,
            name: `${seasonTeam.User.username} - ${seasonTeam.Team.name} (${
              seasonTeam.Season?.name
            }${seasonTeam.Season?.year ? `, ${seasonTeam.Season?.year}` : ""})`,
          };
        });
      break;
  }
  res.render("../src/views/admin/db.ejs", {
    username: req.Admin.username,
    columns,
    data,
    editColumns: JSON.stringify(
      Object.entries(model.getAttributes())
        .filter(([key, value]) => !(value._autoGenerated || key == "id"))
        .map(([key, value]) => ({
          column: key,
          type: sequelizeDataTypeToHtmlInputType(value.type),
        }))
    ),
    entity: req.params.entity,
    ...extraData,
  });
  return next();
});

router.post("/:entity", async (req, res, next) => {
  const { entity } = req.params;
  const data = req.body;

  // Sanitize data to remove empty strings and convert "null" strings to null
  Object.keys(data).forEach((key) => {
    if (data[key] === "") {
      delete data[key];
    } else if (data[key] === "null") {
      data[key] = null;
    }
  });

  try {
    switch (entity) {
      case "clubs":
        {
          let { name, UserId } = data;
          await ClubService.create(name, UserId);
        }
        break;
      case "teams":
        {
          let { name, ClubId, SeasonId, UserId } = data;
          await TeamService.create(name, ClubId, SeasonId, UserId);
        }
        break;
      case "seasons":
        {
          let { name, year, UserId } = data;
          await SeasonService.create(name, year, UserId);
        }
        break;
      case "members":
        {
          let { name, nickname, abbreviation, SeasonTeamId, UserId } = data;
          await MemberService.create(
            name,
            nickname,
            abbreviation,
            SeasonTeamId,
            UserId
          );
        }
        break;
      case "choreos":
        {
          let { name, counts, SeasonTeamId, UserId } = data;
          await ChoreoService.create(name, counts, SeasonTeamId, [], UserId);
        }
        break;
      default:
        return next(new Error("Invalid entity"));
    }

    res.redirect(`${req.baseUrl}/${entity}`);
  } catch (e) {
    next(e);
  }
});

router.post("/:entity/update", async (req, res, next) => {
  const { entity } = req.params;
  const { id, ...data } = req.body;

  // Sanitize data to remove empty strings and convert "null" strings to null
  Object.keys(data).forEach((key) => {
    if (data[key] === "") {
      delete data[key];
    } else if (data[key] === "null") {
      data[key] = null;
    }
  });

  let service;
  switch (entity) {
    case "clubs":
      service = ClubService;
      break;
    case "teams":
      service = TeamService;
      break;
    case "seasons":
      service = SeasonService;
      break;
    case "members":
      service = MemberService;
      break;
    case "choreos":
      service = ChoreoService;
      break;
    default:
      return next(new Error("Invalid entity"));
  }
  try {
    await service.update(id, data, null, { all: true });
    res.redirect(`${req.baseUrl}/${entity}`);
  } catch (e) {
    next(e);
  }
});

router.delete("/:entity/:id", async (req, res, next) => {
  const { entity, id } = req.params;

  let service;
  switch (entity) {
    case "clubs":
      service = ClubService;
      break;
    case "teams":
      service = TeamService;
      break;
    case "seasons":
      service = SeasonService;
      break;
    case "members":
      service = MemberService;
      break;
    case "choreos":
      service = ChoreoService;
      break;
    default:
      return next(new Error("Invalid entity"));
  }

  try {
    await service.remove(id, null, { all: true });
    res.redirect(`${req.baseUrl}/${entity}`);
  } catch (e) {
    next(e);
  }
});

module.exports = { dbRouter: router };
